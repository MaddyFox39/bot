from telebot import types
from datetime import datetime
from database import db_session, User, Habit, HabitEntry, DailyData, Session as db_Session
from bot_instance import bot
from report_generator import generate_pdf
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker
from  database  import  db_session,  User,  Habit,  HabitEntry,  DailyData,  Session
from  bot_instance  import  bot
from  report_generator  import  generate_pdf
DATABASE_URL = 'sqlite:///habits.db'
ADMIN_PASSWORD = "your_password"
ADMIN_CHAT_ID = 997979287  # –ó–∞–º–µ–Ω–∏ –Ω–∞ chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
Base = declarative_base()
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
Session = sessionmaker(bind=engine)
session = Session()
db_session = session

class OnboardingHandler:
    def __init__(self, bot, user):
        self.bot = bot
        self.user = user
        self.step = 0
        self.messages = {
            'shy': [
                "–û—Ç–ª–∏—á–Ω–æ! You are almost there.",
                "–¢–≤–æ–π –ø–æ–ª?",
                "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
                "–¢–≤–æ–π —Ä–æ—Å—Ç?",
                "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç—ã –∂–∏–≤–µ—à—å?",
                "–¢–≤–æ–π –≥–æ—Ä–æ–¥?",
                "–ë–ª–µ—Å–∫! –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–æ–≤–æ–π –∂–∏–∑–Ω–∏!üí™(–∫–∞—Ä—Ç–∏–Ω–∫–∞). –ù–∞–±–µ—Ä–∏ /menu –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            ],
            'sexy': [
                "–û—Ç–ª–∏—á–Ω–æ! You are almost there.",
                "–¢–≤–æ–π –ø–æ–ª?",
                "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
                "–¢–≤–æ–π —Ä–æ—Å—Ç?",
                "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç—ã –∂–∏–≤–µ—à—å?",
                "–¢–≤–æ–π –≥–æ—Ä–æ–¥?",
                "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å?",
                "–¢–≤–æ–∏ –∑–∞–º–µ—Ä—ã. –í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –æ–±—ä–µ–º —Ç–∞–ª–∏–∏, –±–µ–¥–µ—Ä, –ª—è–∂–∫–∏",
                "–í–≤–µ–¥–∏ —Å–≤–æ—é –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å",
                "–¢—ã –≥–æ—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å?",
                "–¢—ã –≥–æ—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?",
                "–°—É–ø–µ—Ä, –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –º—ã –Ω–∞—á–Ω–µ–º –Ω–∞—à—É —Ä–∞–±–æ—Ç—É. –ù–∞–±–µ—Ä–∏ /menu –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            ],
            'advanced': [
                "–û—Ç–ª–∏—á–Ω–æ! You are almost there.",
                "–¢–≤–æ–π –ø–æ–ª?",
                "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?",
                "–¢–≤–æ–π —Ä–æ—Å—Ç?",
                "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç—ã –∂–∏–≤–µ—à—å?",
                "–¢–≤–æ–π –≥–æ—Ä–æ–¥?",
                "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å?",
                "–¢–≤–æ–∏ –∑–∞–º–µ—Ä—ã. –í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –æ–±—ä–µ–º —Ç–∞–ª–∏–∏, –±–µ–¥–µ—Ä, –ª—è–∂–∫–∏",
                "–í–≤–µ–¥–∏ —Å–≤–æ—é –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å",
                "–¢—ã –≥–æ—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å?",
                "–¢—ã –≥–æ—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?",
                "–í–≤–µ–¥–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow):",
                "–°—É–ø–µ—Ä, –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –º—ã –Ω–∞—á–Ω–µ–º –Ω–∞—à—É —Ä–∞–±–æ—Ç—É. –ù–∞–±–µ—Ä–∏ /menu –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            ]
        }

    def get_keyboard(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'), types.KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'))
        return markup

    def start(self, chat_id):
        self.step = 1
        self.send_message(chat_id, self.messages[self.user.level][0])
        self.process_step(chat_id)

    def process_step(self, chat_id):
        if self.step < len(self.messages[self.user.level]):
            message = self.messages[self.user.level][self.step]
            if message == "–¢–≤–æ–π –ø–æ–ª?":
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                markup.add('–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π')
                self.send_message(chat_id, message, reply_markup=markup)
            elif message in ["–¢—ã –≥–æ—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å?",
                              "–¢—ã –≥–æ—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å?"]:
                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                markup.add('–î–∞', '–ù–µ—Ç')
                self.send_message(chat_id, message, reply_markup=markup)
            else:
                self.send_message(chat_id, message)

            self.bot.register_next_step_handler_by_chat_id(chat_id, self.handle_response)
        else:
            self.step = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
            self.send_message(chat_id, "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            show_main_menu(chat_id)  # –í—ã–∑—ã–≤–∞–µ–º show_main_menu

    def handle_response(self, message):
        chat_id = message.chat.id
        if message.text == '–ù–∞–∑–∞–¥':
            self.step -= 1
            if self.step == 0:
                start_handler(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∞–º–æ–º—É –Ω–∞—á–∞–ª—É
            else:
                self.process_step(chat_id)
        elif message.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
            self.send_message(chat_id, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            self.bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            self.process_data(chat_id, message.text)
            self.step += 1
            self.process_step(chat_id)

    def send_message(self, chat_id, text, reply_markup=None):
        if reply_markup is None:
            reply_markup = self.get_keyboard()  # –î–æ–±–∞–≤–ª–µ–Ω–æ self.
        self.bot.send_message(chat_id, text, reply_markup=reply_markup)

    def process_data(self, chat_id, data):
        if self.step == 1:  # –ü–æ–ª
            gender = data.lower()
            if gender in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
                self.user.gender = gender
                db_session.commit()
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
                self.step -= 1
        elif self.step == 2:  # –í–æ–∑—Ä–∞—Å—Ç
            try:
                age = int(data)
                self.user.age = age
                db_session.commit()
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
                self.step -= 1
        elif self.step == 3:  # –†–æ—Å—Ç
            try:
                height = int(data)
                self.user.height = height
                db_session.commit()
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ).")
                self.step -= 1
        elif self.step == 4:  # –°—Ç—Ä–∞–Ω–∞
            self.user.country = data
            db_session.commit()
        elif self.step == 5:  # –ì–æ—Ä–æ–¥
            self.user.city = data
            db_session.commit()
        elif self.user.level == 'sexy' and self.step == 6: # –í–µ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è Sexy)
            try:
                weight = float(data)
                self.user.weight = weight
                db_session.commit()
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
                self.step -= 1
        elif self.user.level == 'sexy' and self.step == 7:  # –ó–∞–º–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Sexy)
            try:
                measurements = [float(x.strip()) for x in data.split(',')]
                if len(measurements) != 3:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ä–æ–≤.")
                self.user.measurements = ",".join(str(x) for x in measurements)
                db_session.commit()
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç—Ä–∏ –∑–∞–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60,90,55).")
                self.step -= 1
        elif self.user.level == 'sexy' and self.step == 8:  # –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Sexy)
            self.user.custom_habit = data
            db_session.commit()
        elif self.user.level == 'sexy' and self.step == 9:  # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Sexy)
            answer = data.lower()
            if answer == '–¥–∞':
                self.user.active_minutes_ready = True
            elif answer == '–Ω–µ—Ç':
                self.user.active_minutes_ready = False
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
                self.step -= 1
            db_session.commit()
        elif self.user.level == 'sexy' and self.step == 10:  # –®–∞–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Sexy)
            answer = data.lower()
            if answer == '–¥–∞':
                self.user.steps_ready = True
            elif answer == '–Ω–µ—Ç':
                self.user.steps_ready = False
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
                self.step -= 1
            db_session.commit()
        elif self.user.level == 'advanced' and self.step == 6:  # –í–µ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è Advanced)
            try:
                weight = float(data)
                self.user.weight = weight
                db_session.commit()
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
                self.step -= 1
        elif self.user.level == 'advanced' and self.step == 7:  # –ó–∞–º–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Advanced)
            try:
                measurements = [float(x.strip()) for x in data.split(',')]
                if len(measurements) != 3:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ä–æ–≤.")
                self.user.measurements = ",".join(str(x) for x in measurements)
                db_session.commit()
            except ValueError:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç—Ä–∏ –∑–∞–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60,90,55).")
                self.step -= 1
        elif self.user.level == 'advanced' and self.step == 8:  # –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Advanced)
            self.user.custom_habit = data
            db_session.commit()
        elif self.user.level == 'advanced' and self.step == 9:  # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è Advanced)
            answer = data.lower()
            if answer == '–¥–∞':
                self.user.active_minutes_ready = True
            elif answer == '–Ω–µ—Ç':
                self.user.active_minutes_ready = False
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
                self.step -= 1
            db_session.commit()
        elif self.user.level == 'advanced' and self.step == 10:  # –®–∞–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Advanced)
            answer = data.lower()
            if answer == '–¥–∞':
                self.user.steps_ready = True
            elif answer == '–Ω–µ—Ç':
                self.user.steps_ready = False
            else:
                self.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
                self.step -= 1
            db_session.commit()
        elif self.user.level == 'advanced' and self.step == 11:  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è Advanced)
            self.user.timezone = data
            db_session.commit()

def show_settings_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ë–æ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å'),
        types.KeyboardButton('–¢–∞—Ä–∏—Ñ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        types.KeyboardButton('–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ'),
        types.KeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'),
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_settings_menu_choice)

def show_upload_data_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–í–µ—Å', callback_data='upload_weight'),
        types.InlineKeyboardButton('–ó–∞–º–µ—Ä—ã', callback_data='upload_measurements'),
        types.InlineKeyboardButton('–§–æ—Ç–æ –µ–¥—ã', callback_data='upload_food_photo'),
        types.InlineKeyboardButton('–ß–∞—Å—ã —Å–Ω–∞', callback_data='upload_sleep_hours')
    )
    markup.add(
        types.InlineKeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã', callback_data='upload_active_minutes'),
        types.InlineKeyboardButton('–®–∞–≥–∏', callback_data='upload_steps'),
        types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='back_to_main')
    )
    bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:", reply_markup=markup)

def show_tariff_info_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ: —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è', callback_data='show_tariff_info'),
        types.InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data='change_tariff')
    )
    markup.add(
        types.InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏', callback_data='unsubscribe'),
        types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main')
    )
    bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ:", reply_markup=markup)
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ---
def send_stats(message):
    chat_id = message.chat.id
    local_session = Session() # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    user = local_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        pdf_file = generate_pdf(user)
        with open(pdf_file, 'rb') as f:
            bot.send_document(chat_id, f)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    bot.send_message(chat_id,
                     "–ü—Ä–∏–≤–µ—Ç! üëã  –Ø  –±–æ—Ç  Hab  Hub,  —Ç–≤–æ–π  –ª–∏—á–Ω—ã–π  –ø–æ–º–æ—â–Ω–∏–∫  –≤  –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏  —Ü–µ–ª–µ–π! üí™ –í–≤–µ–¥–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    if not user:
        user = User(chat_id=chat_id, reminder_time=None)
        db_session.add(user)
        db_session.commit()

        msg = bot.send_message(chat_id, "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –º—ã –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å?")
        bot.register_next_step_handler(msg, get_name)
    else:
        bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {user.name}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞.")
        show_main_menu(chat_id)

def get_name(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        start_handler(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∞–º–æ–º—É –Ω–∞—á–∞–ª—É
    elif message.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot.send_message(chat_id, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        name = message.text
        user = db_session.query(User).filter_by(chat_id=chat_id).first()
        user.name = name
        db_session.commit()

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('Shy', 'Sexy', 'Advanced')
        bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=markup)
        bot.register_next_step_handler(message, get_level)

def get_level(message):
    chat_id = message.chat.id
    if message.text == '–ù–∞–∑–∞–¥':
        get_name(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–º–µ–Ω–∏
    elif message.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
        bot.send_message(chat_id, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        level = message.text.lower()
        user = db_session.query(User).filter_by(chat_id=chat_id).first()

        if level in ['shy', 'sexy', 'advanced']:
            user.level = level
            db_session.commit()

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('–ü—Ä–∏–Ω–∏–º–∞—é', '–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é')
            bot.send_message(chat_id, "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø—Ä–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞", reply_markup=markup)
            bot.register_next_step_handler(message, accept_rules)
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('Shy', 'Sexy', 'Advanced')
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π:", reply_markup=markup)
            bot.register_next_step_handler(message, get_level)

def accept_rules(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    onboarding = None
    if message.text == '–ù–∞–∑–∞–¥':
        get_level(message) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è
    elif message.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º':
        bot.send_message(chat_id, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    elif message.text == "–ü—Ä–∏–Ω–∏–º–∞—é":
        onboarding = OnboardingHandler(bot, user)
        onboarding.start(chat_id)
    else:
        bot.send_message(chat_id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞.",
                         reply_markup=onboarding.get_keyboard())

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏"),
        types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_main_menu_choice)

def process_main_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏":
        show_habits_menu(chat_id)
    elif choice == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_stats_menu(chat_id)
    elif choice == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_main_menu(chat_id)

def show_habits_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'),
        types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_habits_menu_choice)

def process_habits_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏":
        view_habits(chat_id)
    elif choice == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É":
        add_habit(chat_id)
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É":
        edit_habit(chat_id)
    elif choice == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É":
        delete_habit(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_habits_menu(chat_id)

def show_stats_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_stats_menu_choice)

def process_stats_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
        view_general_stats(chat_id)
    elif choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        view_user_stats(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_stats_menu(chat_id)

def process_settings_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ë–æ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        info_handler(message)
    elif choice == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        communication_settings_handler(message)
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        change_timezone_handler(message)
    elif choice == "–¢–∞—Ä–∏—Ñ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        my_tariff_info_handler(message)
    elif choice == "–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ":
        change_tariff_handler(message)
    elif choice == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏":
        unsubscribe_handler(message)
    elif choice == "–ù–∞–∑–∞–¥":
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_settings_menu(chat_id)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ ---
@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')  # <- –ù–æ–≤—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
def add_habit_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        if user.level == 'basic' and len(user.habits) >= 1:
            bot.send_message(chat_id, "–ù–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É.")
        elif user.level == 'sexy' and len(user.habits) >= 5:
            bot.send_message(chat_id, "–ù–∞ —É—Ä–æ–≤–Ω–µ '–°–µ–∫—Å–∏' –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 5 –ø—Ä–∏–≤—ã—á–µ–∫.")
        else:
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:")
            bot.register_next_step_handler(msg, save_habit)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

def save_habit(message):
    chat_id = message.chat.id
    habit_name = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        habit = Habit(name=habit_name, user_id=user.id)
        db_session.add(habit)
        db_session.commit()
        bot.send_message(chat_id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')
def record_habit_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        habits = db_session.query(Habit).filter_by(user_id=user.id).all()
        if habits:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for habit in habits:
                markup.add(habit.name)
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)
            bot.register_next_step_handler(msg, get_habit_entry)
        else:
            bot.send_message(chat_id,
                             "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addhabit.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


def get_habit_entry(message):
    chat_id = message.chat.id
    habit_name = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    habit = db_session.query(Habit).filter_by(name=habit_name, user_id=user.id).first()
    if habit:
        msg = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '{habit_name}':")
        bot.register_next_step_handler(msg, save_habit_entry, habit)
    else:
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")


def save_habit_entry(message, habit):
    chat_id = message.chat.id
    entry_value = message.text
    entry = HabitEntry(habit_id=habit.id, value=entry_value, date=datetime.now())
    db_session.add(entry)
    db_session.commit()
    bot.send_message(chat_id, f"–ó–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '{habit.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    show_main_menu(chat_id)


@bot.message_handler(commands=['stats'])
@bot.message_handler(func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def get_stats_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        stats = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {user.name}:\n"
        for habit in user.habits:
            stats += f"\n–ü—Ä–∏–≤—ã—á–∫–∞: {habit.name}\n"
            entries = db_session.query(HabitEntry).filter_by(habit_id=habit.id).all()
            if entries:
                for entry in entries:
                    stats += f" - {entry.date.strftime('%Y-%m-%d')}: {entry.value}\n"
            else:
                stats += " –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
        bot.send_message(chat_id, stats)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@bot.message_handler(commands=['setreminder'])
@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')  # <-  –î–æ–±–∞–≤—å  –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
def set_reminder_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
        bot.register_next_step_handler(message, save_reminder_time)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

def save_reminder_time(message):
    chat_id = message.chat.id

    reminder_time = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        user.reminder_time = reminder_time  # <-- –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç reminder_time
        db_session.commit()
        bot.send_message(chat_id, f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}.")
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ ---
@bot.message_handler(commands=['removehabit'])
def remove_habit_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        habits = db_session.query(Habit).filter_by(user_id=user.id).all()
        if habits:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for habit in habits:
                markup.add(habit.name)
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler(msg, delete_habit)
        else:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


def delete_habit(message):
    chat_id = message.chat.id
    habit_name = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    habit = db_session.query(Habit).filter_by(name=habit_name, user_id=user.id).first()
    if habit:
        db_session.delete(habit)
        db_session.commit()
        bot.send_message(chat_id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–¥–∞–ª–µ–Ω–∞.")
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    with open(f"photos/{file_id}.jpg", 'wb') as new_file:
        new_file.write(downloaded_file)

    bot.send_message(chat_id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(commands=['broadcast'])
def broadcast_handler(message):
    chat_id = message.chat.id
    if is_admin(chat_id):
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, broadcast_message)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def broadcast_message(message):
    text = message.text
    broadcast_message_to_all(text)


def broadcast_message_to_all(text):
    users = db_session.query(User).all()
    for user in users:
        try:
            bot.send_message(user.chat_id, text)
        except:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.chat_id}")


def is_admin(chat_id):
    admin_ids = [997979287]  # —Å–ø–∏—Å–æ–∫ chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return chat_id in admin_ids


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ ---
def send_evening_poll_start(user_id):
    user = db_session.query(User).filter_by(id=user_id).first()
    if user:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–°—É–ø–µ—Ä', '–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–ú–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ', '–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ', '–°–æ–≤—Å–µ–º –±–µ–¥–∞')
        bot.send_message(user.chat_id, f"{user.name}, –∫–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ —Å–≤–æ–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é?",
                         reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(user.chat_id, get_evening_poll_answer)

def send_subscription_reminder(user):  #  <- –ü–µ—Ä–µ–¥–∞–µ–º  –æ–±—ä–µ–∫—Ç  user
    if user.subscribed_until:
        days_until_subscription_end = (user.subscribed_until - datetime.now().date()).days
        if days_until_subscription_end <= 3:  # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º  –∑–∞  3  –¥–Ω—è
            bot.send_message(user.chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:  –≤–∞—à–∞  –ø–æ–¥–ø–∏—Å–∫–∞  –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è  —á–µ—Ä–µ–∑  {days_until_subscription_end}  –¥–Ω–µ–π.")
def send_lunch_photo_reminder(user):  #  <- –ü–µ—Ä–µ–¥–∞–µ–º  –æ–±—ä–µ–∫—Ç  user
    if user.level in ['sexy', 'advanced']:
        bot.send_message(user.chat_id, "–ù–µ–±–æ–ª—å—à–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –æ–±–µ–¥–∞.")
def send_dinner_photo_reminder(user):  #  <- –ü–µ—Ä–µ–¥–∞–µ–º  –æ–±—ä–µ–∫—Ç  user
    if user.level in ['sexy', 'advanced']:
        bot.send_message(user.chat_id, "–ù–µ–±–æ–ª—å—à–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —É–∂–∏–Ω–∞.")

def get_evening_poll_answer(message):
    chat_id = message.chat.id
    answer = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        daily_data = db_session.query(DailyData).filter_by(user_id=user.id, date=datetime.now().date()).first()
        if not daily_data:
            daily_data = DailyData(user_id=user.id, date=datetime.now().date())
            db_session.add(daily_data)
        daily_data.mood_rating = answer
        db_session.commit()
    bot.send_message(chat_id, "–î–∞–≤–∞–π —Å–≤–µ—Ä–∏–º —Ü–∏—Ñ—Ä—ã. –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç –±—ã–ª–æ –∑–∞ –¥–µ–Ω—å?")
    bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_active_minutes)

def get_evening_poll_active_minutes(message):
    chat_id = message.chat.id
    try:
        active_minutes = int(message.text)
        user = db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = db_session.query(DailyData).filter_by(user_id=user.id, date=datetime.now().date()).first()
            if not daily_data:
                daily_data = DailyData(user_id=user.id, date=datetime.now().date())
                db_session.add(daily_data)
            daily_data.active_minutes = active_minutes
            db_session.commit()
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –±—ã–ª–æ –∑–∞ –¥–µ–Ω—å?")
        bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_steps)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç (—á–∏—Å–ª–æ).")
        bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_active_minutes)

def get_evening_poll_steps(message):
    chat_id = message.chat.id
    try:
        steps = int(message.text)
        user = db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = db_session.query(DailyData).filter_by(user_id=user.id, date=datetime.now().date()).first()
            if not daily_data:
                daily_data = DailyData(user_id=user.id, date=datetime.now().date())
                db_session.add(daily_data)
            daily_data.steps = steps
            db_session.commit()
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ', '–ü–æ–ø—Ä–æ–±—É—é –∑–∞–≤—Ç—Ä–∞')
        bot.send_message(chat_id, "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_goals)
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (—á–∏—Å–ª–æ).")
        bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_steps)
def get_evening_poll_goals(message):
    chat_id = message.chat.id
    answer = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        daily_data = db_session.query(DailyData).filter_by(user_id=user.id, date=datetime.now().date()).first()
        if not daily_data:
            daily_data = DailyData(user_id=user.id, date=datetime.now().date())
            db_session.add(daily_data)
        daily_data.goals_achieved = answer == '–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ'
        db_session.commit()
    if user.level in ['sexy', 'advanced']:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–î–∞', '–ù–µ—Ç')
        bot.send_message(chat_id, f"–¢–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {user.custom_habit}. –ü–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è?",
                         reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_custom_habit)
    else:
        bot.send_message(chat_id, "–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü —Å–µ–≥–æ–¥–Ω—è. –¢—É—Ç –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
        bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_message)

def get_evening_poll_custom_habit(message):
    chat_id = message.chat.id
    answer = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        daily_data = db_session.query(DailyData).filter_by(user_id=user.id, date=datetime.now().date()).first()
        if not daily_data:
            daily_data = DailyData(user_id=user.id, date=datetime.now().date())
            db_session.add(daily_data)
        daily_data.custom_habit_status = answer == '–î–∞'
        db_session.commit()

    bot.send_message(chat_id, "–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü —Å–µ–≥–æ–¥–Ω—è. –¢—É—Ç –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
    bot.register_next_step_handler_by_chat_id(chat_id, get_evening_poll_message)
def get_morning_poll_answer(message):
    chat_id = message.chat.id
    answer = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        daily_data = DailyData(user_id=user.id, mood_rating=answer, date=datetime.now())
        db_session.add(daily_data)
        db_session.commit()
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")

def get_evening_poll_message(message):
    chat_id = message.chat.id
    message_text = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        daily_data = db_session.query(DailyData).filter_by(user_id=user.id, date=datetime.now().date()).first()
        if not daily_data:
            daily_data = DailyData(user_id=user.id, date=datetime.now().date())
            db_session.add(daily_data)
        daily_data.message_to_self = message_text
        db_session.commit()
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!")

def send_custom_reminder(user_id):
    user = db_session.query(User).filter_by(id=user_id).first()
    if user and user.custom_reminder_text:
        bot.send_message(user.chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {user.custom_reminder_text}")

def send_morning_poll():  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞
    users = db_session.query(User).all()
    for user in users:
        bot.send_message(user.chat_id, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?")


def send_afternoon_poll(user_id):
    user = db_session.query(User).filter_by(id=user_id).first()
    if user:
        bot.send_message(user.chat_id, "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–π –¥–µ–Ω—å?")  #  –ü–æ–∫–∞  –±–µ–∑  –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤  –æ—Ç–≤–µ—Ç–æ–≤

def send_evening_poll_start(user_id):
    user = db_session.query(User).filter_by(id=user_id).first()
    if user:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–°—É–ø–µ—Ä', '–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–ú–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ', '–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ', '–°–æ–≤—Å–µ–º –±–µ–¥–∞')
        bot.send_message(user.chat_id, f"{user.name}, –∫–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ —Å–≤–æ–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é?", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(user.chat_id, get_evening_poll_answer)

@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
def info_handler(message):
    chat_id = message.chat.id
    info_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç HabHub, –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.

    –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏
    - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    - –ü—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã
    - –°–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á–µ—Ç—ã

    –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç—Ä–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏:
    - Shy
    - Sexy
    - Advanced 
    """
    bot.send_message(chat_id, info_text)


@bot.message_handler(func=lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π")
def communication_settings_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        markup = types.InlineKeyboardMarkup()
        daily_reminders_text = "–í–∫–ª" if user.daily_reminders else "–í—ã–∫–ª"
        newsletter_text = "–í–∫–ª" if user.newsletter else "–í—ã–∫–ª"
        markup.add(types.InlineKeyboardButton(f"–î–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {daily_reminders_text}",
                                              callback_data="toggle_daily_reminders"))
        markup.add(types.InlineKeyboardButton(f"–†–∞—Å—Å—ã–ª–∫–∞: {newsletter_text}", callback_data="toggle_newsletter"))
        bot.send_message(chat_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    db_session.close()

@bot.callback_query_handler(func=lambda call: call.data == "toggle_daily_reminders")
def toggle_daily_reminders_handler(call):
    chat_id = call.message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    user.daily_reminders = not user.daily_reminders
    db_session.commit()
    daily_reminders_text = "–í–∫–ª" if user.daily_reminders else "–í—ã–∫–ª"
    newsletter_text = "–í–∫–ª" if user.newsletter else "–í—ã–∫–ª"
    new_markup = types.InlineKeyboardMarkup()
    new_markup.add(
        types.InlineKeyboardButton(f"–î–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {daily_reminders_text}",
                                   callback_data="toggle_daily_reminders"))
    new_markup.add(types.InlineKeyboardButton(f"–†–∞—Å—Å—ã–ª–∫–∞: {newsletter_text}", callback_data="toggle_newsletter"))
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=new_markup)


@bot.callback_query_handler(func=lambda call: call.data == "toggle_newsletter")
def toggle_newsletter_handler(call):
    chat_id = call.message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    user.newsletter = not user.newsletter
    db_session.commit()
    daily_reminders_text = "–í–∫–ª" if user.daily_reminders else "–í—ã–∫–ª"
    newsletter_text = "–í–∫–ª" if user.newsletter else "–í—ã–∫–ª"
    new_markup = types.InlineKeyboardMarkup()
    new_markup.add(
        types.InlineKeyboardButton(f"–î–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {daily_reminders_text}",
                                   callback_data="toggle_daily_reminders"))
    new_markup.add(types.InlineKeyboardButton(f"–†–∞—Å—Å—ã–ª–∫–∞: {newsletter_text}", callback_data="toggle_newsletter"))
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=new_markup)


@bot.message_handler(func=lambda message: message.text == "–°–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
def change_timezone_handler(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow):")
    bot.register_next_step_handler(message, save_timezone)


def save_timezone(message):
    chat_id = message.chat.id
    timezone = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        user.timezone = timezone
        db_session.commit()
        bot.send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone}.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ")
def my_tariff_info_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        bot.send_message(chat_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {user.level}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


@bot.message_handler(func=lambda message: message.text == "–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ")
def change_tariff_handler(message):
    chat_id = message.chat.id
    # –ó–¥–µ—Å—å  –Ω—É–∂–Ω–æ  —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å  –ª–æ–≥–∏–∫—É  —Å–º–µ–Ω—ã  —Ç–∞—Ä–∏—Ñ–∞,  –Ω–∞–ø—Ä–∏–º–µ—Ä:
    #  -  –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  –≤—ã–±—Ä–∞—Ç—å  –Ω–æ–≤—ã–π  —Ç–∞—Ä–∏—Ñ.
    #  -  –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏  –æ–ø–ª–∞—Ç—É.
    #  -  –û–±–Ω–æ–≤–∏—Ç—å  –¥–∞–Ω–Ω—ã–µ  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  –≤  –±–∞–∑–µ.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
def unsubscribe_handler(message):
    chat_id = message.chat.id
    #  –ó–¥–µ—Å—å  –Ω—É–∂–Ω–æ  —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å  –ª–æ–≥–∏–∫—É  –æ—Ç–∫–∞–∑–∞  –æ—Ç  –ø–æ–¥–ø–∏—Å–∫–∏,  –Ω–∞–ø—Ä–∏–º–µ—Ä:
    #  -  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å  –æ—Ç–∫–∞–∑  —É  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    #  -  –û—Ç–∫–ª—é—á–∏—Ç—å  –ø–ª–∞—Ç–Ω—É—é  –ø–æ–¥–ø–∏—Å–∫—É.
    #  -  –û–±–Ω–æ–≤–∏—Ç—å  –¥–∞–Ω–Ω—ã–µ  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  –≤  –±–∞–∑–µ.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


@bot.message_handler(func=lambda message: message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def upload_data_handler(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å:", reply_markup=get_upload_data_keyboard())

def get_upload_data_keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–í–µ—Å", "–ó–∞–º–µ—Ä—ã", "–§–æ—Ç–æ –µ–¥—ã", "–ß–∞—Å—ã —Å–Ω–∞", "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã", "–®–∞–≥–∏", "–û—Ç–º–µ–Ω–∞")
    return markup

@bot.message_handler(func=lambda message: message.text in ["–í–µ—Å", "–ó–∞–º–µ—Ä—ã", "–§–æ—Ç–æ –µ–¥—ã", "–ß–∞—Å—ã —Å–Ω–∞", "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã", "–®–∞–≥–∏", "–û—Ç–º–µ–Ω–∞"])
def process_upload_data_choice(message):
    chat_id = message.chat.id
    choice = message.text
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    if choice == "–í–µ—Å":
        bot.send_message(chat_id,"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
        bot.register_next_step_handler(message, save_weight)
    elif choice == "–ó–∞–º–µ—Ä—ã":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—Ä—ã (—Ç–∞–ª–∏—è, –±–µ–¥—Ä–∞, –ª—è–∂–∫–∞, –≤ —Å–º) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        bot.register_next_step_handler(message, save_measurements)
    elif choice == "–§–æ—Ç–æ –µ–¥—ã":
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã:")
        bot.register_next_step_handler(message, save_food_photo)
    elif choice == "–ß–∞—Å—ã —Å–Ω–∞":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞:")
        bot.register_next_step_handler(message, save_sleep_hours)
    elif choice == "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç:")
        bot.register_next_step_handler(message, save_active_minutes)
    elif choice == "–®–∞–≥–∏":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:")
        bot.register_next_step_handler(message, save_steps)
    elif choice == "–û—Ç–º–µ–Ω–∞":
        show_main_menu(chat_id)

def save_weight(message):
    chat_id = message.chat.id
    try:
        weight = float(message.text)
        local_db_session = db_Session()
        user = local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = DailyData(user_id=user.id, weight=weight, date=datetime.now())
            local_db_session.add(daily_data)
            local_db_session.commit()
            bot.send_message(chat_id, f"–í–∞—à –≤–µ—Å ({weight} –∫–≥) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
        bot.register_next_step_handler(message, save_weight)

def save_measurements(message):
    chat_id = message.chat.id
    try:
        measurements = [float(x.strip()) for x in message.text.split(',')]
        if len(measurements) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ä–æ–≤.")
        local_db_session = db_Session()
        user = local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = DailyData(user_id=user.id, measurements=",".join(str(x) for x in measurements), date=datetime.now())
            local_db_session.add(daily_data)
            local_db_session.commit()
            bot.send_message(chat_id, f"–í–∞—à–∏ –∑–∞–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç—Ä–∏ –∑–∞–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60,90,55).")
        bot.register_next_step_handler(message, save_measurements)

def save_food_photo(message):
    chat_id = message.chat.id
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(f"food_photos/{file_id}.jpg", "wb") as new_file:
            new_file.write(downloaded_file)
        local_db_session = db_Session()
        user = local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = DailyData(user_id=user.id, food_photo=f"{file_id}.jpg", date=datetime.now())
            local_db_session.add(daily_data)
            local_db_session.commit()
            bot.send_message(chat_id, "–§–æ—Ç–æ –µ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        bot.register_next_step_handler(message, save_food_photo)

def save_sleep_hours(message):
    chat_id = message.chat.id
    try:
        sleep_hours = float(message.text)
        local_db_session = db_Session()
        user = local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = DailyData(user_id=user.id, sleep_hours=sleep_hours, date=datetime.now())
            local_db_session.add(daily_data)
            local_db_session.commit()
            bot.send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞ ({sleep_hours}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞ (—á–∏—Å–ª–æ).")
        bot.register_next_step_handler(message, save_sleep_hours)

def save_active_minutes(message):
    chat_id = message.chat.id
    try:
        active_minutes = int(message.text)
        local_db_session = db_Session()
        user = local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = DailyData(user_id=user.id, active_minutes=active_minutes, date=datetime.now())
            local_db_session.add(daily_data)
            local_db_session.commit()
            bot.send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç ({active_minutes}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç (—á–∏—Å–ª–æ).")
        bot.register_next_step_handler(message, save_active_minutes)

def save_steps(message):
    chat_id = message.chat.id
    try:
        steps = int(message.text)
        local_db_session = db_Session()
        user = local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if user:
            daily_data = DailyData(user_id=user.id, steps=steps, date=datetime.now())
            local_db_session.add(daily_data)
            local_db_session.commit()
            bot.send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ ({steps}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            show_main_menu(chat_id)
        else:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (—á–∏—Å–ª–æ).")
        bot.register_next_step_handler(message, save_steps)

def get_upload_date(message):
    chat_id  =  message.chat.id
    try:
        date_str  =  message.text
        upload_date  =  datetime.strptime(date_str,  "%Y-%m-%d").date()
        local_db_session = db_Session()
        user  =  local_db_session.query(User).filter_by(chat_id=chat_id).first()
        if  user:
            daily_data  =  local_db_session.query(DailyData).filter_by(user_id=user.id,  date=upload_date).first()
            if  not  daily_data:
                daily_data  =  DailyData(user_id=user.id,  date=upload_date)
                local_db_session.add(daily_data)
                local_db_session.commit()
            bot.send_message(chat_id,  "–û—Ç–ø—Ä–∞–≤—å—Ç–µ  —Ñ–æ—Ç–æ  –µ–¥—ã:")
            bot.register_next_step_handler(message,  get_food_photo,  daily_data)
        else:
            bot.send_message(chat_id,  "–°–Ω–∞—á–∞–ª–∞  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å  —Å  –ø–æ–º–æ—â—å—é  –∫–æ–º–∞–Ω–¥—ã  /start.")
    except  ValueError:
        bot.send_message(chat_id,  "–ù–µ–≤–µ—Ä–Ω—ã–π  —Ñ–æ—Ä–º–∞—Ç  –¥–∞—Ç—ã.  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ  –ì–ì–ì–ì-–ú–ú-–î–î.")
        bot.register_next_step_handler(message,  get_upload_date)

def get_food_photo(message,  daily_data):
    chat_id  =  message.chat.id
    if  message.photo:
        file_id  =  message.photo[-1].file_id
        file_info  =  bot.get_file(file_id)
        downloaded_file  =  bot.download_file(file_info.file_path)
        with  open(f"food_photos/{file_id}.jpg",  "wb")  as  new_file:
            new_file.write(downloaded_file)
        daily_data.food_photo  =  f"{file_id}.jpg"
        local_db_session = db_Session()
        local_db_session.commit()
        bot.send_message(chat_id,  "–í–≤–µ–¥–∏—Ç–µ  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ  –∞–∫—Ç–∏–≤–Ω—ã—Ö  –º–∏–Ω—É—Ç:")
        bot.register_next_step_handler(message,  get_active_minutes,  daily_data)
    else:
        bot.send_message(chat_id,  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,  –æ—Ç–ø—Ä–∞–≤—å—Ç–µ  —Ñ–æ—Ç–æ.")
        bot.register_next_step_handler(message,  get_food_photo,  daily_data)

def get_active_minutes(message,  daily_data):
    chat_id  =  message.chat.id
    try:
        active_minutes  =  int(message.text)
        daily_data.active_minutes  =  active_minutes
        local_db_session = db_Session()
        local_db_session.commit()
        bot.send_message(chat_id,  "–í–≤–µ–¥–∏—Ç–µ  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ  —á–∞—Å–æ–≤  —Å–Ω–∞:")
        bot.register_next_step_handler(message,  get_sleep_hours,  daily_data)
    except  ValueError:
        bot.send_message(chat_id,  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,  –≤–≤–µ–¥–∏—Ç–µ  —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message,  get_active_minutes,  daily_data)

def get_sleep_hours(message,  daily_data):
    chat_id  =  message.chat.id
    try:
        sleep_hours  =  float(message.text)
        daily_data.sleep_hours  =  sleep_hours
        local_db_session = db_Session()
        local_db_session.commit()
        #  ... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ  —Å–±–æ—Ä–∞  –¥–∞–Ω–Ω—ã—Ö)  ...
        bot.send_message(chat_id,  "–î–∞–Ω–Ω—ã–µ  –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    except  ValueError:
        bot.send_message(chat_id,  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,  –≤–≤–µ–¥–∏—Ç–µ  —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message,  get_sleep_hours,  daily_data)

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É")
def change_custom_habit_handler(message):
    chat_id  =  message.chat.id
    bot.send_message(chat_id,  "–í–≤–µ–¥–∏—Ç–µ  –Ω–æ–≤—É—é  –∫–∞—Å—Ç–æ–º–Ω—É—é  –ø—Ä–∏–≤—ã—á–∫—É:")
    bot.register_next_step_handler(message,  save_custom_habit)

def save_custom_habit(message):
    chat_id  =  message.chat.id
    custom_habit  =  message.text
    local_db_session = db_Session()
    user  =  local_db_session.query(User).filter_by(chat_id=chat_id).first()
    if  user:
        user.custom_habit  =  custom_habit
        local_db_session.commit()
        bot.send_message(chat_id,  f"–ö–∞—Å—Ç–æ–º–Ω–∞—è  –ø—Ä–∏–≤—ã—á–∫–∞  –∏–∑–º–µ–Ω–µ–Ω–∞  –Ω–∞:  {custom_habit}")
    else:
        bot.send_message(chat_id,  "–°–Ω–∞—á–∞–ª–∞  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å  —Å  –ø–æ–º–æ—â—å—é  –∫–æ–º–∞–Ω–¥—ã  /start.")

@bot.message_handler(commands=['setcustomreminder'])
def set_custom_reminder_handler(message):
    chat_id  =  message.chat.id
    local_db_session = db_Session()
    user  =  local_db_session.query(User).filter_by(chat_id=chat_id).first()
    if  user:
        bot.send_message(chat_id,  "–í–≤–µ–¥–∏—Ç–µ  —Ç–µ–∫—Å—Ç  –≤–∞—à–µ–≥–æ  –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ  –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        bot.register_next_step_handler(message,  save_custom_reminder_text)
    else:
        bot.send_message(chat_id,  "–°–Ω–∞—á–∞–ª–∞  –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å  —Å  –ø–æ–º–æ—â—å—é  –∫–æ–º–∞–Ω–¥—ã  /start.")

def save_custom_reminder_text(message):
    chat_id  =  message.chat.id
    local_db_session = db_Session()
    user  =  local_db_session.query(User).filter_by(chat_id=chat_id).first()
    user.custom_reminder_text  =  message.text
    local_db_session.commit()
    bot.send_message(chat_id,  f"–í–∞—à  –∫–∞—Å—Ç–æ–º–Ω—ã–π  —Ç–µ–∫—Å—Ç  –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:  {message.text}")

@bot.message_handler(commands=['viewcustomreminder'])
def view_custom_reminder_handler(message):
    chat_id  =  message.chat.id
    local_db_session = db_Session()
    user  =  local_db_session.query(User).filter_by(chat_id=chat_id).first()
    if  user  and  user.custom_reminder_text:
        bot.send_message(chat_id,  f"–í–∞—à  –∫–∞—Å—Ç–æ–º–Ω—ã–π  —Ç–µ–∫—Å—Ç  –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:  {user.custom_reminder_text}")
    else:
        bot.send_message(chat_id,  "–£  –≤–∞—Å  –ø–æ–∫–∞  –Ω–µ—Ç  –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ  –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—É—á–µ–π")
def connect_coaches_handler(message):
    chat_id = message.chat.id
    #  –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ  —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å  –ª–æ–≥–∏–∫—É  –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è  –∫–æ—É—á–µ–π,  –Ω–∞–ø—Ä–∏–º–µ—Ä:
    #  -  –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  –≤—ã–±—Ä–∞—Ç—å  –∫–æ—É—á–∞  –∏–∑  —Å–ø–∏—Å–∫–∞.
    #  -  –°–æ–∑–¥–∞—Ç—å  –æ—Ç–¥–µ–ª—å–Ω—ã–π  —á–∞—Ç  —Å  –∫–æ—É—á–µ–º.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—É—á–µ–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


@bot.message_handler(commands=['getstats'])
def get_stats_handler(message):
    chat_id = message.chat.id
    user = db_session.query(User).filter_by(chat_id=chat_id).first()
    if user:
        try:
            #  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º  PDF-–æ—Ç—á–µ—Ç
            pdf_file = generate_pdf(user)

            #  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º  –æ—Ç—á–µ—Ç  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(pdf_file, 'rb') as pdf:
                bot.send_document(chat_id, pdf)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    else:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")


@bot.message_handler(commands=['admin'])
def admin_command_handler(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:")
    bot.register_next_step_handler(msg, check_admin_password)


def check_admin_password(message):
    chat_id = message.chat.id
    if message.text == ADMIN_PASSWORD:
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")


def show_admin_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
        types.KeyboardButton('–ü—Ä–∏–≤—ã—á–∫–∏'),
        types.KeyboardButton('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
        types.KeyboardButton('–û–ø—Ä–æ—Å—ã')
    )
    markup.add(
        types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('–ò–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è'),
        types.KeyboardButton('–õ–æ–≥–∏')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_admin_menu_choice)


def process_admin_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_users_menu(chat_id)
    elif choice == "–ü—Ä–∏–≤—ã—á–∫–∏":
        show_habits_menu(chat_id)
    elif choice == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        show_reminders_menu(chat_id)
    elif choice == "–û–ø—Ä–æ—Å—ã":
        show_polls_menu(chat_id)
    elif choice == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_stats_menu(chat_id)
    elif choice == "–ò–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è":
        show_info_messages_menu(chat_id)
    elif choice == "–õ–æ–≥–∏":
        show_logs_menu(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_main_menu(chat_id)
    else:
        if chat_id == ADMIN_CHAT_ID:
            check_admin_password(message)
        else:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            show_admin_menu(chat_id)

def show_users_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_users_menu_choice)


def process_users_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        view_users(chat_id)
    elif choice == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        add_user(chat_id)
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        edit_user(chat_id)
    elif choice == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        delete_user(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_users_menu(chat_id)


def view_users(chat_id):
    local_session = Session()
    users = local_session.query(User).all()
    if users:
        users_info = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user in users:
            users_info += f"ID: {user.id}, –ò–º—è: {user.name}, –£—Ä–æ–≤–µ–Ω—å: {user.level},  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}\n"
        bot.send_message(chat_id, users_info)
    else:
        bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    local_session.close()


def view_habits(chat_id):
    local_session = Session()
    habits = local_session.query(Habit).all()
    if habits:
        habits_info = "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫:\n"
        for habit in habits:
            habits_info += f"ID: {habit.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {habit.name}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {habit.user_id}\n"
        bot.send_message(chat_id, habits_info)
    else:
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    local_session.close()


def show_reminders_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'),
        types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_reminders_menu_choice)


def process_reminders_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        view_reminders(chat_id)
    elif choice == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        add_reminder(chat_id)
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        edit_reminder(chat_id)
    elif choice == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        delete_reminder(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_reminders_menu(chat_id)


def view_reminders(chat_id):
    local_session = Session()
    users = local_session.query(User).all()
    if users:
        reminders_info = "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        for user in users:
            if user.reminder_time:
                reminders_info += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}, –í—Ä–µ–º—è: {user.reminder_time}\n"
        bot.send_message(chat_id, reminders_info)
    else:
        bot.send_message(chat_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    local_session.close()


def show_polls_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–æ—Å—ã'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å'),
        types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –æ–ø—Ä–æ—Å–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_polls_menu_choice)


def process_polls_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–æ—Å—ã":
        view_polls(chat_id)
    elif choice == "–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å":
        add_poll(chat_id)
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å":
        edit_poll(chat_id)
    elif choice == "–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å":
        delete_poll(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_polls_menu(chat_id)


def view_polls(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–æ—Å–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    show_polls_menu(chat_id)



def view_general_stats(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞, –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏–Ω—É—Ç, —à–∞–≥–æ–≤
    # –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_stats_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def view_user_stats(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    # –ø–æ –≤–µ—Å—É, —Å–Ω—É, –∑–∞–º–µ—Ä–∞–º, –∞–∫—Ç–∏–≤–Ω—ã–º –º–∏–Ω—É—Ç–∞–º –∏ —à–∞–≥–∞–º –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_stats_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def show_info_messages_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è'),
        types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_info_messages_menu_choice)


def process_info_messages_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è":
        view_info_messages(chat_id)
    elif choice == "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        add_info_message(chat_id)
    elif choice == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        edit_info_message(chat_id)
    elif choice == "–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        delete_info_message(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_info_messages_menu(chat_id)


def view_info_messages(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_info_messages_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def show_logs_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏'),
        types.KeyboardButton('–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏')
    )
    markup.add(
        types.KeyboardButton('–ù–∞–∑–∞–¥')
    )
    bot.send_message(chat_id, "–ú–µ–Ω—é –ª–æ–≥–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, process_logs_menu_choice)


def process_logs_menu_choice(message):
    chat_id = message.chat.id
    choice = message.text
    if choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏":
        view_logs(chat_id)
    elif choice == "–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏":
        download_logs(chat_id)
    elif choice == "–ù–∞–∑–∞–¥":
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        show_logs_menu(chat_id)


def view_logs(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_logs_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def download_logs(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_logs_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def add_user(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789):")
    bot.register_next_step_handler_by_chat_id(chat_id, get_new_user_id)


def get_new_user_id(message):
    chat_id = message.chat.id
    try:
        new_user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=new_user_id).first()
        if user:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        else:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            bot.register_next_step_handler_by_chat_id(chat_id, get_new_user_name, new_user_id)
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        add_user(chat_id)

def get_new_user_name(message, new_user_id):
    chat_id = message.chat.id
    name = message.text
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('Shy', 'Sexy', 'Advanced')
    msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(chat_id, get_new_user_level, new_user_id, name)

def get_new_user_level(message, new_user_id, name):
    chat_id = message.chat.id
    level = message.text.lower()
    if level in ['shy', 'sexy', 'advanced']:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow):")
        bot.register_next_step_handler_by_chat_id(chat_id, get_new_user_timezone, new_user_id, name, level)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        get_new_user_level(message, new_user_id, name)


def get_new_user_timezone(message, new_user_id, name, level):
    chat_id = message.chat.id
    timezone = message.text
    local_session = Session()
    new_user = User(chat_id=new_user_id, name=name, level=level, timezone=timezone)
    local_session.add(new_user)
    local_session.commit()
    bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —Å ID {new_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    show_users_menu(chat_id)

def edit_user(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_user_id_for_edit)


def get_user_id_for_edit(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=user_id).first()
        if user:
            bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –Ω–∞–π–¥–µ–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(
                types.KeyboardButton('–ò–º—è'),
                types.KeyboardButton('–£—Ä–æ–≤–µ–Ω—å'),
                types.KeyboardButton('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')
            )
            markup.add(
                types.KeyboardButton('–ù–∞–∑–∞–¥')
            )
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, get_edit_field, user)
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        edit_user(chat_id)


def get_edit_field(message, user):
    chat_id = message.chat.id
    field = message.text
    if field == "–ò–º—è":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        bot.register_next_step_handler_by_chat_id(chat_id, edit_user_name, user)
    elif field == "–£—Ä–æ–≤–µ–Ω—å":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:")
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('Shy', 'Sexy', 'Advanced')
        msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, edit_user_level, user)
    elif field == "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:")
        bot.register_next_step_handler_by_chat_id(chat_id, edit_user_timezone, user)
    elif field == "–ù–∞–∑–∞–¥":
        show_users_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        get_edit_field(message, user)


def edit_user_name(message, user):
    chat_id = message.chat.id
    new_name = message.text
    local_session = Session()
    user.name = new_name
    local_session.commit()
    bot.send_message(chat_id, f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}.")
    show_users_menu(chat_id)


def edit_user_level(message, user):
    chat_id = message.chat.id
    new_level = message.text.lower()
    if new_level in ['shy', 'sexy', 'advanced']:
        local_session = Session()
        user.level = new_level
        local_session.commit()
        bot.send_message(chat_id, f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_level}.")
        show_users_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        edit_user_level(message, user)


def edit_user_timezone(message, user):
    chat_id = message.chat.id
    new_timezone = message.text
    local_session = Session()
    user.timezone = new_timezone
    local_session.commit()
    bot.send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_timezone}.")
    show_users_menu(chat_id)


def delete_user(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_user_id_for_delete)


def get_user_id_for_delete(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=user_id).first()
        if user:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            msg = bot.send_message(chat_id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} —Å ID {user_id}?", reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, confirm_delete_user, user)
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        delete_user(chat_id)


def confirm_delete_user(message, user):
    chat_id = message.chat.id
    if message.text == "–î–∞":
        local_session = Session()
        local_session.delete(user)
        local_session.commit()
        bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} —Å ID {user.chat_id} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    show_users_menu(chat_id)


def add_habit(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_new_habit_name)

def get_new_habit_name(message):
    chat_id = message.chat.id
    habit_name = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_user_id_for_habit, habit_name)


def get_user_id_for_habit(message, habit_name):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=user_id).first()
        if user:
            new_habit = Habit(name=habit_name, user_id=user.id)
            local_session.add(new_habit)
            local_session.commit()
            bot.send_message(chat_id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}!")
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        get_user_id_for_habit(message, habit_name)
    show_habits_menu(chat_id)


def edit_habit(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_habit_id_for_edit)


def get_habit_id_for_edit(message):
    chat_id = message.chat.id
    try:
        habit_id = int(message.text)
        local_session = Session()
        habit = local_session.query(Habit).filter_by(id=habit_id).first()
        if habit:
            bot.send_message(chat_id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit.name}' –Ω–∞–π–¥–µ–Ω–∞. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(
                types.KeyboardButton('–ù–∞–∑–≤–∞–Ω–∏–µ'),
                types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            )
            markup.add(
                types.KeyboardButton('–ù–∞–∑–∞–¥')
            )
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, get_edit_habit_field, habit)
        else:
            bot.send_message(chat_id, "–ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        edit_habit(chat_id)


def get_edit_habit_field(message, habit):
    chat_id = message.chat.id
    field = message.text
    if field == "–ù–∞–∑–≤–∞–Ω–∏–µ":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler_by_chat_id(chat_id, edit_habit_name, habit)
    elif field == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler_by_chat_id(chat_id, edit_habit_user, habit)
    elif field == "–ù–∞–∑–∞–¥":
        show_habits_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        get_edit_habit_field(message, habit)


def edit_habit_name(message, habit):
    chat_id = message.chat.id
    new_name = message.text
    local_session = Session()
    habit.name = new_name
    local_session.commit()
    bot.send_message(chat_id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ {habit.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}.")
    show_habits_menu(chat_id)


def edit_habit_user(message, habit):
    chat_id = message.chat.id
    try:
        new_user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=new_user_id).first()
        if user:
            habit.user_id = user.id
            local_session.commit()
            bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {user.name}.")
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        edit_habit_user(message, habit)
    show_habits_menu(chat_id)


def delete_habit(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_habit_id_for_delete)


def get_habit_id_for_delete(message):
    chat_id = message.chat.id
    try:
        habit_id = int(message.text)
        local_session = Session()
        habit = local_session.query(Habit).filter_by(id=habit_id).first()
        if habit:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            msg = bot.send_message(chat_id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É '{habit.name}' —Å ID {habit_id}?", reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, confirm_delete_habit, habit)
        else:
            bot.send_message(chat_id, "–ü—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        delete_habit(chat_id)


def confirm_delete_habit(message, habit):
    chat_id = message.chat.id
    if message.text == "–î–∞":
        local_session = Session()
        local_session.delete(habit)
        local_session.commit()
        bot.send_message(chat_id, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit.name}' —Å ID {habit.id} —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    show_habits_menu(chat_id)


def add_reminder(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_user_id_for_reminder)


def get_user_id_for_reminder(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=user_id).first()
        if user:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
            bot.register_next_step_handler_by_chat_id(chat_id, get_reminder_time, user)
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        add_reminder(chat_id)


def get_reminder_time(message, user):
    chat_id = message.chat.id
    reminder_time = message.text
    user.reminder_time = reminder_time  # <-- –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç reminder_time
    db_session.commit()
    bot.send_message(chat_id, f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time}.")
    show_reminders_menu(chat_id)

def edit_reminder(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_user_id_for_edit_reminder)


def get_user_id_for_edit_reminder(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=user_id).first()
        if user:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
            bot.register_next_step_handler_by_chat_id(chat_id, get_new_reminder_time, user)
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        edit_reminder(chat_id)


def get_new_reminder_time(message, user):
    chat_id = message.chat.id
    new_reminder_time = message.text
    user.reminder_time = new_reminder_time
    db_session.commit()
    bot.send_message(chat_id, f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_reminder_time}.")
    show_reminders_menu(chat_id)

def delete_reminder(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    bot.register_next_step_handler_by_chat_id(chat_id, get_user_id_for_delete_reminder)


def get_user_id_for_delete_reminder(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        local_session = Session()
        user = local_session.query(User).filter_by(chat_id=user_id).first()
        if user:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            msg = bot.send_message(chat_id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}?", reply_markup=markup)
            bot.register_next_step_handler_by_chat_id(chat_id, confirm_delete_reminder, user)
        else:
            bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        delete_reminder(chat_id)


def confirm_delete_reminder(message, user):
    chat_id = message.chat.id
    if message.text == "–î–∞":
        user.reminder_time = None
        db_session.commit()
        bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} —É–¥–∞–ª–µ–Ω–æ.")
    else:
        bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    show_reminders_menu(chat_id)


def add_poll(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤,
    # –∞ –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    show_polls_menu(chat_id)


def get_poll_question(message):
    chat_id = message.chat.id
    question = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ  –≤–∞—Ä–∏–∞–Ω—Ç—ã  –æ—Ç–≤–µ—Ç–æ–≤  —á–µ—Ä–µ–∑  –∑–∞–ø—è—Ç—É—é  (–Ω–∞–ø—Ä–∏–º–µ—Ä,  –î–∞,  –ù–µ—Ç):")
    bot.register_next_step_handler_by_chat_id(chat_id, get_poll_options, question)


def get_poll_options(message, question):
    chat_id = message.chat.id
    options = message.text.split(',')
    options = [option.strip() for option in options]
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ  –≤—Ä–µ–º—è  –ø—É–±–ª–∏–∫–∞—Ü–∏–∏  –æ–ø—Ä–æ—Å–∞  –≤  —Ñ–æ—Ä–º–∞—Ç–µ  –ß–ß:–ú–ú  (–Ω–∞–ø—Ä–∏–º–µ—Ä,  10:00):")
    bot.register_next_step_handler_by_chat_id(chat_id, get_poll_time, question, options)


def get_poll_time(message, question, options):
    chat_id = message.chat.id
    poll_time = message.text
    #  –ó–¥–µ—Å—å  –Ω—É–∂–Ω–æ  —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ  –æ–ø—Ä–æ—Å–∞  –≤  –±–∞–∑—É  –¥–∞–Ω–Ω—ã—Ö
    #  –∏  –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å  –µ–≥–æ  –ø—É–±–ª–∏–∫–∞—Ü–∏—é  –Ω–∞  –∑–∞–¥–∞–Ω–Ω–æ–µ  –≤—Ä–µ–º—è
    bot.send_message(chat_id, f"–û–ø—Ä–æ—Å  '{question}'  —É—Å–ø–µ—à–Ω–æ  –¥–æ–±–∞–≤–ª–µ–Ω  –∏  –±—É–¥–µ—Ç  –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω  –≤  {poll_time}!")
    show_polls_menu(chat_id)


def edit_poll(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å,
    # –∞ –∑–∞—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ (–≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    show_polls_menu(chat_id)


def delete_poll(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    show_polls_menu(chat_id)

def add_info_message(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏,
    # –∞ –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_info_messages_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def get_info_message_text(message):
    chat_id = message.chat.id
    text = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ  –≤—Ä–µ–º—è  –æ—Ç–ø—Ä–∞–≤–∫–∏  —Å–æ–æ–±—â–µ–Ω–∏—è  –≤  —Ñ–æ—Ä–º–∞—Ç–µ  –ß–ß:–ú–ú  (–Ω–∞–ø—Ä–∏–º–µ—Ä,  10:00):")
    bot.register_next_step_handler_by_chat_id(chat_id, get_info_message_time, text)


def get_info_message_time(message, text):
    chat_id = message.chat.id
    time = message.text
    #  –ó–¥–µ—Å—å  –Ω—É–∂–Ω–æ  —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ  —Å–æ–æ–±—â–µ–Ω–∏—è  –≤  –±–∞–∑—É  –¥–∞–Ω–Ω—ã—Ö
    #  –∏  –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å  –µ–≥–æ  –æ—Ç–ø—Ä–∞–≤–∫—É  –Ω–∞  –∑–∞–¥–∞–Ω–Ω–æ–µ  –≤—Ä–µ–º—è
    bot.send_message(chat_id,
                     f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ  —Å–æ–æ–±—â–µ–Ω–∏–µ  '{text}'  —É—Å–ø–µ—à–Ω–æ  –¥–æ–±–∞–≤–ª–µ–Ω  –∏  –±—É–¥–µ—Ç  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ  –≤  {time}!")
    show_info_messages_menu(chat_id)


def edit_info_message(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å,
    # –∞ –∑–∞—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_info_messages_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


def edit_info_message(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å,
    # –∞ –∑–∞—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_info_messages_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤

def delete_info_message(chat_id):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    # show_info_messages_menu(chat_id) # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –≤—ã–∑–æ–≤


@bot.message_handler(commands=['admin'])
def admin_command_handler(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:")
    bot.register_next_step_handler(msg, check_admin_password)

def check_admin_password(message):
    chat_id = message.chat.id
    if message.text == ADMIN_PASSWORD:
        show_admin_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")



